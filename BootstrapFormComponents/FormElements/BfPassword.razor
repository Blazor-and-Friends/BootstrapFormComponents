@inherits MinLengthMaxLengthBaseInput

<div class="mb-3">
    <LabelHelper
        HideLabel="HideLabel"
        InputId="@ElementId"
        LabelText="@DisplayName"
        Required="Required"
        Title="@Title"/>

    <div class="input-group">
        <input 
            type="@inputType"
            @attributes="AdditionalAttributes"
            @bind-value="CurrentValue"
            aria-disabled="@disabled"
            aria-readonly="@readOnly"
            aria-required="@Required"
            class="form-control @CssClass"
            disabled="@disabled"
            id="@ElementId"
            maxlength="@MaxLength"
            min="@MinLength"
            placeholder="@Placeholder"
            readonly="@readOnly"
            required="@Required"
            title="@Title"
            />

        <button type="button" @onclick="toggleMaskedMode" class="@btnCss">
            @if (isMaskingPassword)
            {
                <span class="oi oi-eye" title="Show password"></span>
            }
            else
            {
                <span class="oi oi-ban" title="Hide password"></span>
            }
        </button>
    </div>
    

    @if(ValidationFor != null)
    {
        <div class="form-control-validation">
            <ValidationMessage For="@ValidationFor" />
        </div>
    }

    @if(HelpText != null)
    {
        <div class="form-text ms-3">@HelpText</div>
    }
</div>

@code {
    /// <summary>
    /// If true, a "required" attribute is placed on the input element and the associated label will have a red asterisk indicating this is a required field. Default is true.
    /// </summary>
    [Parameter] public override bool Required { get; set; } = true;

    string btnCss = "btn btn-outline-primary";
    string inputType = "password";
    bool isMaskingPassword = true;

    void toggleMaskedMode()
    {
        isMaskingPassword = !isMaskingPassword;
        if (isMaskingPassword)
        {
            btnCss = "btn btn-outline-primary";
            inputType = "password";
        }
        else
        {
            btnCss = "btn btn-outline-danger";
            inputType = "text";
        }
    }

    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }
}